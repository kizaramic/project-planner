{"version":3,"sources":["components/layouts/SignedInLinks.js","store/actions/authActions.js","components/layouts/SignedOutLinks.js","components/layouts/Navbar.js","components/dashboard/Notifications.js","components/projects/ProjectSummary.js","components/projects/ProjectList.js","components/dashboard/Dashboard.js","components/projects/ProjectDetails.js","components/auth/SignIn.js","components/auth/Register.js","components/projects/CreateProject.js","store/actions/projectActions.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/projectReducer.js","store/reducers/rootReducer.js","config/firebaseConfig.js","index.js"],"names":["connect","dispatch","signOut","getState","_ref2","getFirebase","auth","then","type","props","react_default","a","createElement","className","NavLink","to","href","onClick","profile","initials","SignedOutLinks","state","firebase","links","uid","layouts_SignedInLinks","layouts_SignedOutLinks","Link","Notifications","notifications","map","notification","key","id","user","content","Date","now","ProjectSummary","_ref","project","projectName","authorFirstName","authorLastName","ProjectList","projects","projects_ProjectSummary","Dashboard","_this$props","this","projects_ProjectList","dashboard_Notifications","Redirect","Component","compose","firestore","ordered","firestoreConnect","collection","orderBy","limit","ownProps","match","params","data","SignIn","email","password","handleChange","e","_this","setState","Object","defineProperty","target","value","handleSubmit","preventDefault","signIn","authError","onSubmit","htmlFor","onChange","creds","credentials","signInWithEmailAndPassword","catch","err","Register","firstName","lastName","register","newUser","_ref3","getFirestore","createUserWithEmailAndPassword","resp","doc","set","CreateProject","createProject","history","push","authorId","add","objectSpread","createdAt","App","BrowserRouter","layouts_Navbar","Switch","Route","exact","path","component","ProjectDetails","Boolean","window","location","hostname","initState","authReducer","arguments","length","undefined","action","message","projectReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","settings","timestampsInSnapshots","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","firebaseConfig","reactReduxFirebase","useFirestoreForProfile","userProfile","attachAuthIsReady","firebaseAuthIsReady","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e506703.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { signOut } from '../../store/actions/authActions';\n\n\nconst SignedInLinks = (props) => {\n    return (\n        <ul className=\"right\" >\n            <li><NavLink to='/create'>New project</NavLink></li>\n            <li><a href=\"/\" onClick={props.signOut}>Logout</a></li>\n            <li><NavLink to='/' className='btn btn-floating pink lighten-1'>\n                {props.profile.initials}\n            </NavLink></li>\n        </ul>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        signOut: () => dispatch(signOut())\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(SignedInLinks);","import { getFirestore } from \"redux-firestore\";\n\n// authentication of user with email and password as credentials with getFirebase\n\nexport const signIn = (credentials) => {\n    return (dispatch, getState, { getFirebase }) => {\n        const firebase = getFirebase();\n\n        firebase.auth().signInWithEmailAndPassword(\n            credentials.email,\n            credentials.password\n        ).then(() => {\n            dispatch({ type: 'LOGIN_SUCESS' })\n        }).catch((err) => {\n            dispatch({ type: 'LOGIN_ERROR', err })\n        });\n    }\n}\n\n// signing out the user \n\nexport const signOut = () => {\n    return (dispatch, getState, { getFirebase }) => {\n        const firebase = getFirebase();\n\n        firebase.auth().signOut().then(() => {\n            dispatch({ type: 'SIGNOUT_SUCCESS' })\n        })\n    }\n}\n\n// creating a new user in firestore collection, getFirebase for authentication\n\nexport const register = (newUser) => {\n    return (dispatch, getState, { getFirebase, getFirestore }) => {\n        const firebase = getFirebase();\n        const firestore = getFirestore();\n\n        firebase.auth().createUserWithEmailAndPassword(\n            newUser.email,\n            newUser.password\n        ).then((resp) => {\n            // making a user document in firestore with autogenereted uid from resp and setting some properties in that doc \n            return firestore.collection('users').doc(resp.user.uid).set({\n                firstName: newUser.firstName,\n                lastName: newUser.lastName,\n                initials: newUser.firstName[0] + newUser.lastName[0]\n            })\n        }).then(() => {\n            dispatch({ type: 'REGISTER_SUCCESS' })\n        }).catch(err => {\n            dispatch({ type: 'REGISTER_ERROR', err })\n        })\n    }\n}","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\n\nconst SignedOutLinks = () => {\n    return (\n        <ul className=\"right\" >\n            <li><NavLink to='/register'>Register</NavLink></li>\n            <li><NavLink to='/signin'>Login</NavLink></li>\n        </ul>\n    )\n}\n\nexport default SignedOutLinks ","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport SignedInLinks from './SignedInLinks';\nimport SignedOutLinks from './SignedOutLinks';\nimport { connect } from 'react-redux';\n\nconst Navbar = (props) => {\n    const { auth, profile } = props;\n    //console.log(auth);\n    const links = auth.uid ? <SignedInLinks profile={profile} /> : <SignedOutLinks />\n    return (\n        <nav className=\"nav-wrapper grey darken-3\">\n            <div className=\"container\">\n                <Link to='/' className=\"brand-logo\">Planner</Link>\n                {links}\n            </div>\n        </nav>\n    )\n}\n\n\nconst mapStateToProps = (state) => {\n    // console.log(state)\n    return {\n        auth: state.firebase.auth,\n        profile: state.firebase.profile\n    }\n}\n\nexport default connect(mapStateToProps)(Navbar) ","import React from 'react';\n\n\n\nconst Notifications = (props) => {\n    const { notifications } = props;\n    return (\n        <div className=\"section\">\n            <div className=\"card\">\n                <div className=\"card-content\">\n                    <span className=\"card-title\">Notifications</span>\n                    <ul className=\"notifications\" >\n                        {notifications && notifications.map(notification => {\n                            return (\n                                <li key={notifications.id}>\n                                    <span className=\"red-text\">{notification.user}</span>\n                                    <span> {notification.content}</span>\n                                    <div className=\"grey-text note-date\">\n                                        {Date.now()}\n                                    </div>\n                                </li>\n                            )\n                        })}\n                    </ul>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default Notifications","import React from 'react';\n\n\nconst ProjectSummary = ({ project }) => {\n    return (\n        <div className=\"card project-summary\">\n            <div className=\"card-content grey-text text-darken-3\">\n                <span className=\"card-title\">{project.projectName}</span>\n                <p>Posted by: {project.authorFirstName} {project.authorLastName}</p>\n                <div className=\"grey-text\">date</div>\n            </div>\n        </div>\n    )\n}\n\nexport default ProjectSummary","import React from 'react';\nimport ProjectSummary from './ProjectSummary';\nimport { Link } from 'react-router-dom';\n\nconst ProjectList = ({ projects }) => {\n    return (\n        <div className=\"project-list section\">\n            {projects && projects.map(project => {\n                return (\n                    <Link to={'/project/' + project.id}>\n                        <ProjectSummary project={project} key={project.id} />\n                    </Link>)\n            })}\n        </div>\n    )\n}\n\nexport default ProjectList\n","import React, { Component } from 'react';\nimport Notifications from './Notifications';\nimport ProjectList from '../projects/ProjectList';\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\nimport { Redirect } from 'react-router-dom';\n\n\nclass Dashboard extends Component {\n    render() {\n        //console.log(this.props);\n        const { projects, auth, notifications } = this.props;\n        if (!auth.uid) return <Redirect to='/signin' />\n\n        return (\n            <div className=\"dashboard container\">\n                <div className=\"row\">\n                    <div className=\"col s12 m6\">\n                        <ProjectList projects={projects} />\n                    </div>\n                    <div className=\"col s12 m4 offset-m1\">\n                        <Notifications notifications={notifications} />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n//controlling the view of the user, depending on the uid status \nconst mapStateToProps = (state) => {\n    return {\n        projects: state.firestore.ordered.projects,\n        auth: state.firebase.auth,\n        notifications: state.firestore.ordered.notifications\n    }\n}\n// using compose for more than 1 HOC, firestoreConnect for cloud listeners\nexport default compose(\n    connect(mapStateToProps),\n    firestoreConnect([\n        { collection: 'projects', orderBy: ['createdAt', 'desc'] },\n        { collection: 'notifications', limit: 5, orderBy: ['time', 'desc'] }\n    ])\n)(Dashboard)\n\n","import React from 'react'\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\nimport { Redirect } from 'react-router-dom';\n\n\nconst ProjectDetails = (props) => {\n    const { project, auth } = props;\n    if (!auth.uid) return <Redirect to='/signin' />\n\n    if (project) {\n        return (\n            <div>\n                <div className=\"container section project-details\">\n                    <div className=\"card\">\n                        <div className=\"card-content\">\n                            <span className=\"card-title\">{project.projectName} </span>\n                            <p>{project.content}</p>\n                        </div>\n                        <div className=\"card-action grey lighten-4 grey-text\">\n                            <div>Posted by: {project.authorFirstName} {project.authorLastName} </div>\n                            <p className=\"grey-text\">date</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"container center\">\n                <p>Loading, just a second...</p>\n            </div>\n        )\n    }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    //console.log(state);\n    const id = ownProps.match.params.id;\n    const projects = state.firestore.data.projects;\n    const project = projects ? projects[id] : null\n    return {\n        project: project,\n        auth: state.firebase.auth\n    }\n}\n\n\nexport default compose(\n    connect(mapStateToProps),\n    firestoreConnect([\n        { collection: 'projects' }\n    ])\n)(ProjectDetails)","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { signIn } from '../../store/actions/authActions';\nimport { Redirect } from 'react-router-dom';\n\nclass SignIn extends Component {\n    state = {\n        email: \"\",\n        password: \"\"\n    }\n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.signIn(this.state);\n    }\n    render() {\n        const { authError, auth } = this.props;\n        if (auth.uid) return <Redirect to='/' />\n\n        return (\n            <div className=\"container\">\n                <form onSubmit={this.handleSubmit} className=\"white\">\n                    <h5 className=\"grey-text text-darken-3\">Sign In</h5>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"email\">Email</label>\n                        <input type=\"email\" id=\"email\" onChange={this.handleChange} />\n                    </div>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"password\">Password</label>\n                        <input type=\"password\" id=\"password\" onChange={this.handleChange} />\n                    </div>\n                    <div className=\"input-field\">\n                        <button className=\"btn pink lighten-1\">Login</button>\n                        <div className=\"red-text center\">\n                            {authError ? <p>{authError}</p> : null}\n                        </div>\n                    </div>\n                </form>\n            </div>\n\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        authError: state.auth.authError,\n        auth: state.firebase.auth\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        signIn: (creds) => dispatch(signIn(creds))\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn)","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { register } from '../../store/actions/authActions';\n\n\nclass Register extends Component {\n    state = {\n        email: \"\",\n        password: \"\",\n        firstName: \"\",\n        lastName: \"\"\n    }\n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    // this.state represents a newUser\n    handleSubmit = (e) => {\n        e.preventDefault()\n        //console.log(this.state)\n        this.props.register(this.state);\n    }\n    render() {\n        const { auth, authError } = this.props;\n        if (auth.uid) return <Redirect to='/' />\n\n        return (\n            <div className=\"container\">\n                <form onSubmit={this.handleSubmit} className=\"white\">\n                    <h5 className=\"grey-text text-darken-3\">Register (don't worry, no need for email confirmation) :)</h5>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"email\">Email</label>\n                        <input type=\"email\" id=\"email\" onChange={this.handleChange} />\n                    </div>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"password\">Password</label>\n                        <input type=\"password\" id=\"password\" onChange={this.handleChange} />\n                    </div>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"firstName\">First Name</label>\n                        <input type=\"text\" id=\"firstName\" onChange={this.handleChange} />\n                    </div>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"lastName\">Last Name</label>\n                        <input type=\"text\" id=\"lastName\" onChange={this.handleChange} />\n                    </div>\n                    <div className=\"input-field\">\n                        <button className=\"btn pink lighten-1\">Register</button>\n                        <div className=\"red-text center\">\n                            {authError ? <p>{authError}</p> : null}\n                        </div>\n                    </div>\n                </form>\n            </div>\n\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        auth: state.firebase.auth,\n        authError: state.auth.authError\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        register: (newUser) => dispatch(register(newUser))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { createProject } from '../../store/actions/projectActions';\nimport { Redirect } from 'react-router-dom';\n\nclass CreateProject extends Component {\n    state = {\n        projectName: \"\",\n        content: \"\"\n    }\n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        //creating a new project with new state : projectName & content\n        this.props.createProject(this.state);\n        //redirecting a user after creating a new project\n        this.props.history.push('/');\n    }\n    render() {\n        const { auth } = this.props;\n        if (!auth.uid) return <Redirect to='/signin' />\n        return (\n            <div className=\"container\">\n                <form onSubmit={this.handleSubmit} className=\"white\">\n                    <h5 className=\"grey-text text-darken-3\">Create New Project</h5>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"projectName\">Project Name</label>\n                        <input type=\"text\" id=\"projectName\" onChange={this.handleChange} />\n                    </div>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"content\">Project Content</label>\n                        <textarea id=\"content\" className=\"materialize-textarea\" onChange={this.handleChange}></textarea>\n                    </div>\n\n                    <div className=\"input-field\">\n                        <button className=\"btn pink lighten-1\">Create</button>\n                    </div>\n                </form>\n            </div>\n\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        auth: state.firebase.auth\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        createProject: project => dispatch(createProject(dispatch))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateProject)","export const createProject = (project) => {\n    return (dispatch, getState, { getFirebase, getFirestore }) => {\n        //making async call to database while pausing the dispatch\n        const firestore = getFirestore();\n        const profile = getState().firebase.profile;\n        const authorId = getState().firebase.auth.uid;\n\n        firestore.collection('projects').add({\n            ...project,\n            authorFirstName: profile.firstName,\n            authorLastName: profile.lastName,\n            authorId: authorId,\n            createdAt: new Date()\n        }).then(() => {\n            dispatch({ type: 'CREATE_PROJECT', project });\n        }).catch((err) => {\n            dispatch({ type: 'CREATE_PROJECT_ERROR', err })\n        })\n    }\n};","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport './index.css';\n\nimport Navbar from './components/layouts/Navbar';\nimport Dashboard from './components/dashboard/Dashboard';\nimport ProjectDetails from './components/projects/ProjectDetails';\nimport SignIn from './components/auth/SignIn';\nimport Register from './components/auth/Register';\nimport CreateProject from './components/projects/CreateProject';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={Dashboard} />\n            <Route path='/project/:id' component={ProjectDetails} />\n            <Route path='/signin' component={SignIn} />\n            <Route path='/register' component={Register} />\n            <Route path='/create' component={CreateProject} />\n\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\n    authError: null\n}\n\n\nconst authReducer = (state = initState, action) => {\n    switch (action.type) {\n        case 'LOGIN_ERROR':\n            //console.log('login error');\n            return {\n                ...state,\n                authError: 'Login failed'\n            }\n        case 'LOGIN_SUCCESS':\n            //console.log('login success');\n            return {\n                ...state,\n                authError: null\n            }\n        case 'SIGNOUT_SUCCESS':\n            //console.log('signout succcess');\n            return state;\n        case 'REGISTER_SUCCESS':\n            return {\n                ...state,\n                authError: null\n            }\n        case 'REGISTER_ERROR':\n            return {\n                ...state,\n                authError: action.err.message\n            }\n        default:\n            return state;\n    }\n}\nexport default authReducer","const initState = {\n    projects: []\n}\n\n\nconst projectReducer = (state = initState, action) => {\n    switch (action.type) {\n        case 'CREATE_PROJECT':\n            return state;\n        case 'CREATE_PROJECT_ERROR':\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default projectReducer","import authReducer from './authReducer';\nimport projectReducer from './projectReducer';\nimport { combineReducers } from 'redux';\nimport { firestoreReducer } from 'redux-firestore';\nimport { firebaseReducer } from 'react-redux-firebase';\n\n\nconst rootReducer = combineReducers({\n    auth: authReducer,\n    project: projectReducer,\n    firestore: firestoreReducer,\n    firebase: firebaseReducer\n})\n\nexport default rootReducer","import firebase from 'firebase/app';\n// importing just firestore & auth\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\n// Initialize Firebase\nvar config = {\n    apiKey: \"AIzaSyCzRp7Z4ADVbXKCotBVvirggMOCi2waQCE\",\n    authDomain: \"planner-react.firebaseapp.com\",\n    databaseURL: \"https://planner-react.firebaseio.com\",\n    projectId: \"planner-react\",\n    storageBucket: \"planner-react.appspot.com\",\n    messagingSenderId: \"677887885350\"\n};\n\nfirebase.initializeApp(config);\n\nfirebase.firestore().settings({ timestampsInSnapshots: true });\n\nexport default firebase;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from './store/reducers/rootReducer';\nimport thunk from 'redux-thunk';\nimport { reduxFirestore, getFirestore } from 'redux-firestore';\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase';\nimport firebaseConfig from './config/firebaseConfig';\n\nconst store = createStore(rootReducer,\n    compose(\n        applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n        reduxFirestore(firebaseConfig),\n        reactReduxFirebase(firebaseConfig, { useFirestoreForProfile: true, userProfile: 'users', attachAuthIsReady: true })\n    )\n);\n\n// avoiding flicker while loading the page, holding the page while waiting on response of firebase.auth \nstore.firebaseAuthIsReady.then(() => {\n    ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n    serviceWorker.unregister();\n})\n\n\n"],"sourceRoot":""}